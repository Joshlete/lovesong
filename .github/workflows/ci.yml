name: CI/CD Pipeline

# 🧭 Branching Strategy:
# main (production) - Full CI + deployment
# develop (integration) - Full CI for team testing  
# feature/* - CI validation before merge
# bugfix/* - CI validation for fixes

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_CONNECTION: pgsql
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_DATABASE: testdb
      DB_USERNAME: testuser
      DB_PASSWORD: testpass
      APP_ENV: testing
      STRIPE_KEY: ${{ secrets.STRIPE_KEY }}
      STRIPE_SECRET: ${{ secrets.STRIPE_SECRET }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      # S3 Configuration for testing (optional - test will be skipped if not configured)
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_BUCKET: ${{ secrets.AWS_BUCKET }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: pdo_pgsql

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Prepare Laravel
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan migrate --force

      - name: 🔍 Verify Jetstream Installation
        run: |
          echo "🔍 Verifying Jetstream components..."
          
          # Check if Jetstream config exists
          if [ ! -f "config/jetstream.php" ]; then
            echo "❌ Jetstream config not found"
            exit 1
          fi
          echo "✅ Jetstream config found"
          
          # Check if Fortify config exists
          if [ ! -f "config/fortify.php" ]; then
            echo "❌ Fortify config not found"
            exit 1
          fi
          echo "✅ Fortify config found"
          
          # Check for custom authentication setup (AuthModal instead of traditional views)
          if [ ! -f "app/Livewire/AuthModal.php" ]; then
            echo "❌ AuthModal component not found"
            exit 1
          fi
          echo "✅ AuthModal component found"
          
          if [ ! -f "resources/views/livewire/partials/auth-modal-login.blade.php" ]; then
            echo "❌ Login modal view not found"
            exit 1
          fi
          echo "✅ Login modal view found"
          
          if [ ! -f "resources/views/livewire/auth-modal.blade.php" ]; then
            echo "❌ Auth modal main view not found"
            exit 1
          fi
          echo "✅ Auth modal main view found"
          
          # Check if dashboard view exists
          if [ ! -f "resources/views/dashboard.blade.php" ]; then
            echo "❌ Dashboard view not found"
            exit 1
          fi
          echo "✅ Dashboard view found"
          
          # Check if landing page exists (custom auth setup)
          if [ ! -f "resources/views/landing.blade.php" ]; then
            echo "❌ Landing page not found"
            exit 1
          fi
          echo "✅ Landing page found"
          
          # Check if Jetstream service provider is registered
          if ! grep -q "JetstreamServiceProvider" bootstrap/providers.php; then
            echo "❌ JetstreamServiceProvider not registered"
            exit 1
          fi
          echo "✅ JetstreamServiceProvider registered"
          
          # Check if Tailwind config exists
          if [ ! -f "tailwind.config.js" ]; then
            echo "❌ Tailwind config not found"
            exit 1
          fi
          echo "✅ Tailwind config found"
          
          # Verify auth routes are properly configured
          if ! grep -q "Route::get('/login'" routes/web.php; then
            echo "❌ Login route not found"
            exit 1
          fi
          echo "✅ Auth routes configured"
          
          echo "🎉 All Jetstream components verified successfully!"

      - name: 🔍 Verify Stripe Installation
        run: |
          echo "🔍 Verifying Stripe components..."
          
          # Check if Stripe package is installed
          if ! composer show stripe/stripe-php > /dev/null 2>&1; then
            echo "❌ Stripe PHP SDK not installed"
            exit 1
          fi
          echo "✅ Stripe PHP SDK installed"
          
          # Check if Stripe service configuration exists
          if ! php artisan config:show services.stripe > /dev/null 2>&1; then
            echo "❌ Stripe service configuration not found"
            exit 1
          fi
          echo "✅ Stripe service configuration found"
          
          # Verify Stripe test keys are properly set (optional in CI)
          if [ -z "$STRIPE_KEY" ] || [ -z "$STRIPE_SECRET" ]; then
            echo "⚠️  Stripe test keys not configured (this is normal in CI environments)"
          else
            echo "✅ Stripe test keys configured"
          fi
          
          # Check if PaymentService exists
          if [ ! -f "app/Services/PaymentService.php" ]; then
            echo "❌ PaymentService not found"
            exit 1
          fi
          echo "✅ PaymentService found"
          
          # Test basic Stripe connectivity (only if keys are available)
          if [ -n "$STRIPE_SECRET" ] && [ "$STRIPE_SECRET" != "" ]; then
            php -r "
              require 'vendor/autoload.php';
              \Stripe\Stripe::setApiKey('$STRIPE_SECRET');
              try {
                \Stripe\Account::retrieve();
                echo '✅ Stripe API connectivity verified' . PHP_EOL;
              } catch (Exception \$e) {
                echo '❌ Stripe API connectivity failed: ' . \$e->getMessage() . PHP_EOL;
                exit(1);
              }
            "
          else
            echo "⚠️  Stripe API connectivity test skipped (no secret key available in CI)"
          fi
          
          echo "🎉 All Stripe components verified successfully!"

      - name: 🔍 Verify S3 Configuration
        run: |
          echo "🔍 Verifying S3 components..."
          
          # Check if AWS S3 package is installed
          if ! composer show league/flysystem-aws-s3-v3 > /dev/null 2>&1; then
            echo "❌ AWS S3 Flysystem adapter not installed"
            exit 1
          fi
          echo "✅ AWS S3 Flysystem adapter installed"
          
          # Check if S3 disk configuration exists
          if ! php artisan config:show filesystems.disks.s3 > /dev/null 2>&1; then
            echo "❌ S3 disk configuration not found"
            exit 1
          fi
          echo "✅ S3 disk configuration found"
          
          # Check if S3FileService test exists
          if [ ! -f "tests/Feature/S3ConnectionTest.php" ]; then
            echo "❌ S3ConnectionTest not found"
            exit 1
          fi
          echo "✅ S3ConnectionTest found"
          
          # Verify AWS credentials are available (optional in CI)
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "⚠️  AWS credentials not configured (S3 tests will be skipped)"
          else
            echo "✅ AWS credentials configured"
          fi
          
          echo "🎉 All S3 components verified successfully!"

      - name: Run tests
        run: php artisan test
        
      - name: 📊 Test Results
        if: always()
        run: |
          echo "✅ Tests completed for branch: ${{ github.ref_name }}"
          echo "🔗 Commit: ${{ github.sha }}"
